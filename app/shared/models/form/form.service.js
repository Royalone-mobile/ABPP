"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var config_1 = require("../../config");
var sqlite_1 = require("../../data/providers/sqlite");
var FormService = (function () {
    function FormService(http, db) {
        this.http = http;
        this.db = db;
        this.id = config_1.Config.guid;
        this.auth = config_1.Config.authToken;
    }
    FormService.prototype.loadPage = function (page_id) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        console.log(JSON.stringify({
            ID: page_id,
            GUID: this.auth
        }), { headers: headers });
        return this.http.post(config_1.Config.apiUrl + "GetPage", JSON.stringify({
            ID: page_id,
            GUID: this.auth
        }), { headers: headers })
            .map(function (response) {
            var data = response.json();
            data = JSON.parse(data.d);
            console.log("data:" + data);
            return data;
        })
            .catch(this.handleErrors)
            .publishReplay(1)
            .refCount();
    };
    FormService.prototype.loadMenu = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.post(config_1.Config.apiUrl + "GetCustomer", JSON.stringify({
            ID: this.id,
            GUID: this.auth
        }), { headers: headers })
            .map(function (response) {
            var menuArray = [];
            var data = response.json();
            var settings = JSON.parse(data.d);
            settings.Menu.MenuItems.forEach(function (item) {
                menuArray.push({
                    id: item.Id, title: item.Title, page_id: item.Page_Id
                });
            });
            return menuArray;
        })
            .catch(this.handleErrors)
            .publishReplay(1)
            .refCount();
    };
    FormService.prototype.handleErrors = function (error) {
        console.log(error.status + ' - ' + JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    return FormService;
}());
FormService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, sqlite_1.Sqlite])
], FormService);
exports.FormService = FormService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLHNDQUF3RDtBQUN4RCw4QkFBcUM7QUFDckMsZ0NBQThCO0FBQzlCLGlDQUErQjtBQUcvQix1Q0FBcUM7QUFDckMsc0RBQXFEO0FBR3JELElBQWEsV0FBVztJQUlwQixxQkFBb0IsSUFBVSxFQUFVLEVBQVU7UUFBOUIsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVE7UUFDOUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxlQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsOEJBQVEsR0FBUixVQUFTLE9BQWU7UUFDcEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNuQixFQUFFLEVBQUUsT0FBTztZQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNsQixDQUFDLEVBQ0YsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQ2xCLENBQUM7UUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2pCLGVBQU0sQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ1gsRUFBRSxFQUFFLE9BQU87WUFDWCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDbEIsQ0FBQyxFQUNGLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUN0QjthQUNBLEdBQUcsQ0FBQyxVQUFBLFFBQVE7WUFDVCxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDeEIsYUFBYSxDQUFDLENBQUMsQ0FBQzthQUNoQixRQUFRLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsOEJBQVEsR0FBUjtRQUNJLElBQUksT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUM7UUFDNUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2pCLGVBQU0sQ0FBQyxNQUFNLEdBQUcsYUFBYSxFQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ1gsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2xCLENBQUMsRUFDRixFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUMsQ0FDdEI7YUFDQSxHQUFHLENBQUMsVUFBQSxRQUFRO1lBQ1QsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ25CLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO2dCQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDO29CQUNYLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsT0FBTztpQkFDbkQsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3JCLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2FBQ3hCLGFBQWEsQ0FBQyxDQUFDLENBQUM7YUFDaEIsUUFBUSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELGtDQUFZLEdBQVosVUFBYSxLQUFlO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRSxLQUFLLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxlQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDTCxrQkFBQztBQUFELENBQUMsQUFwRUQsSUFvRUM7QUFwRVksV0FBVztJQUR2QixpQkFBVSxFQUFFO3FDQUtpQixXQUFJLEVBQWMsZUFBTTtHQUp6QyxXQUFXLENBb0V2QjtBQXBFWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL1J4XCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9kb1wiO1xuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvbWFwXCI7XG5cbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwiLi9mb3JtXCJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi8uLi9jb25maWdcIlxuaW1wb3J0IHsgU3FsaXRlIH0gZnJvbSBcIi4uLy4uL2RhdGEvcHJvdmlkZXJzL3NxbGl0ZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRm9ybVNlcnZpY2Uge1xuICAgIHByaXZhdGUgaWQ6IGFueTtcbiAgICBwcml2YXRlIGF1dGg6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cCwgcHJpdmF0ZSBkYjogU3FsaXRlKXsgXG4gICAgICAgIHRoaXMuaWQgPSBDb25maWcuZ3VpZDtcbiAgICAgICAgdGhpcy5hdXRoID0gQ29uZmlnLmF1dGhUb2tlbjtcbiAgICB9XG4gICAgXG4gICAgbG9hZFBhZ2UocGFnZV9pZDogTnVtYmVyKXtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgICAgICBoZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBJRDogcGFnZV9pZCxcbiAgICAgICAgICAgICAgICBHVUlEOiB0aGlzLmF1dGhcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgeyBoZWFkZXJzOiBoZWFkZXJzfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KFxuICAgICAgICAgICAgQ29uZmlnLmFwaVVybCArIFwiR2V0UGFnZVwiLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIElEOiBwYWdlX2lkLFxuICAgICAgICAgICAgICAgIEdVSUQ6IHRoaXMuYXV0aFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB7IGhlYWRlcnM6IGhlYWRlcnN9XG4gICAgICAgIClcbiAgICAgICAgLm1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEuZCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRhdGE6XCIgKyBkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcnMpXG4gICAgICAgIC5wdWJsaXNoUmVwbGF5KDEpXG4gICAgICAgIC5yZWZDb3VudCgpO1xuICAgIH1cblxuICAgIGxvYWRNZW51KCl7XG4gICAgICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoXG4gICAgICAgICAgICBDb25maWcuYXBpVXJsICsgXCJHZXRDdXN0b21lclwiLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIElEOiB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIEdVSUQ6IHRoaXMuYXV0aFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB7IGhlYWRlcnM6IGhlYWRlcnN9XG4gICAgICAgIClcbiAgICAgICAgLm1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBsZXQgbWVudUFycmF5ID0gW107XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGxldCBzZXR0aW5ncyA9IEpTT04ucGFyc2UoZGF0YS5kKTtcbiAgICAgICAgICAgIHNldHRpbmdzLk1lbnUuTWVudUl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBtZW51QXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlkOml0ZW0uSWQsdGl0bGU6aXRlbS5UaXRsZSxwYWdlX2lkOml0ZW0uUGFnZV9JZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWVudUFycmF5O1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcnMpXG4gICAgICAgIC5wdWJsaXNoUmVwbGF5KDEpXG4gICAgICAgIC5yZWZDb3VudCgpO1xuICAgIH1cblxuICAgIGhhbmRsZUVycm9ycyhlcnJvcjogUmVzcG9uc2Upe1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5zdGF0dXMgKycgLSAnK0pTT04uc3RyaW5naWZ5KGVycm9yLmpzb24oKSkpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcik7XG4gICAgfVxufSJdfQ==